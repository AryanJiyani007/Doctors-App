{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/lib/utils.js"],"sourcesContent":["import { clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAM;IAC1B,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/components/ui/card.jsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Card({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"card\"\r\n      className={cn(\r\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\r\n        className\r\n      )}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction CardHeader({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"card-header\"\r\n      className={cn(\r\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\r\n        className\r\n      )}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction CardTitle({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"card-title\"\r\n      className={cn(\"leading-none font-semibold\", className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction CardDescription({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"card-description\"\r\n      className={cn(\"text-muted-foreground text-sm\", className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction CardAction({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"card-action\"\r\n      className={cn(\r\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\r\n        className\r\n      )}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction CardContent({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (<div data-slot=\"card-content\" className={cn(\"px-6\", className)} {...props} />);\r\n}\r\n\r\nfunction CardFooter({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"card-footer\"\r\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nexport {\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardAction,\r\n  CardDescription,\r\n  CardContent,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAEA;;;;AAEA,SAAS,KAAK,EACZ,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,WAAW,EAClB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,UAAU,EACjB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,gBAAgB,EACvB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,WAAW,EAClB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACJ;IACC,qBAAQ,8OAAC;QAAI,aAAU;QAAe,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QAAa,GAAG,KAAK;;;;;;AACnF;AAEA,SAAS,WAAW,EAClB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAEf","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/components/ui/button.jsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\r\n        ghost:\r\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\r\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\r\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\r\n        icon: \"size-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nfunction Button({\r\n  className,\r\n  variant,\r\n  size,\r\n  asChild = false,\r\n  ...props\r\n}) {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    (<Comp\r\n      data-slot=\"button\"\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OACJ;IACC,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAEf","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/components/ui/textarea.jsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Textarea({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<textarea\r\n      data-slot=\"textarea\"\r\n      className={cn(\r\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n        className\r\n      )}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nexport { Textarea }\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,ucACA;QAED,GAAG,KAAK;;;;;;AAEf","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/components/ui/badge.jsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nfunction Badge({\r\n  className,\r\n  variant,\r\n  asChild = false,\r\n  ...props\r\n}) {\r\n  const Comp = asChild ? Slot : \"span\"\r\n\r\n  return (\r\n    (<Comp\r\n      data-slot=\"badge\"\r\n      className={cn(badgeVariants({ variant }), className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,kZACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,UAAU,KAAK,EACf,GAAG,OACJ;IACC,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAEf","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/components/ui/dialog.jsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport { XIcon } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Dialog({\r\n  ...props\r\n}) {\r\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\r\n}\r\n\r\nfunction DialogTrigger({\r\n  ...props\r\n}) {\r\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\r\n}\r\n\r\nfunction DialogPortal({\r\n  ...props\r\n}) {\r\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\r\n}\r\n\r\nfunction DialogClose({\r\n  ...props\r\n}) {\r\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\r\n}\r\n\r\nfunction DialogOverlay({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<DialogPrimitive.Overlay\r\n      data-slot=\"dialog-overlay\"\r\n      className={cn(\r\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\r\n        className\r\n      )}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction DialogContent({\r\n  className,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<DialogPortal data-slot=\"dialog-portal\">\r\n      <DialogOverlay />\r\n      <DialogPrimitive.Content\r\n        data-slot=\"dialog-content\"\r\n        className={cn(\r\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\r\n          className\r\n        )}\r\n        {...props}>\r\n        {children}\r\n        <DialogPrimitive.Close\r\n          className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\r\n          <XIcon />\r\n          <span className=\"sr-only\">Close</span>\r\n        </DialogPrimitive.Close>\r\n      </DialogPrimitive.Content>\r\n    </DialogPortal>)\r\n  );\r\n}\r\n\r\nfunction DialogHeader({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"dialog-header\"\r\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction DialogFooter({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<div\r\n      data-slot=\"dialog-footer\"\r\n      className={cn(\"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\", className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction DialogTitle({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<DialogPrimitive.Title\r\n      data-slot=\"dialog-title\"\r\n      className={cn(\"text-lg leading-none font-semibold\", className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nfunction DialogDescription({\r\n  className,\r\n  ...props\r\n}) {\r\n  return (\r\n    (<DialogPrimitive.Description\r\n      data-slot=\"dialog-description\"\r\n      className={cn(\"text-muted-foreground text-sm\", className)}\r\n      {...props} />)\r\n  );\r\n}\r\n\r\nexport {\r\n  Dialog,\r\n  DialogClose,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogOverlay,\r\n  DialogPortal,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,SAAS,OAAO,EACd,GAAG,OACJ;IACC,qBAAO,8OAAC,kKAAA,CAAA,OAAoB;QAAC,aAAU;QAAU,GAAG,KAAK;;;;;;AAC3D;AAEA,SAAS,cAAc,EACrB,GAAG,OACJ;IACC,qBAAO,8OAAC,kKAAA,CAAA,UAAuB;QAAC,aAAU;QAAkB,GAAG,KAAK;;;;;;AACtE;AAEA,SAAS,aAAa,EACpB,GAAG,OACJ;IACC,qBAAO,8OAAC,kKAAA,CAAA,SAAsB;QAAC,aAAU;QAAiB,GAAG,KAAK;;;;;;AACpE;AAEA,SAAS,YAAY,EACnB,GAAG,OACJ;IACC,qBAAO,8OAAC,kKAAA,CAAA,QAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC,kKAAA,CAAA,UAAuB;QACvB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,QAAQ,EACR,GAAG,OACJ;IACC,qBACG,8OAAC;QAAa,aAAU;;0BACvB,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,aAAU;gBACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,+WACA;gBAED,GAAG,KAAK;;oBACR;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBACpB,WAAU;;0CACV,8OAAC,gMAAA,CAAA,QAAK;;;;;0CACN,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKpC;AAEA,SAAS,aAAa,EACpB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,aAAa,EACpB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC;QACA,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,0DAA0D;QACvE,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC,kKAAA,CAAA,QAAqB;QACrB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAEf;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACJ;IACC,qBACG,8OAAC,kKAAA,CAAA,cAA2B;QAC3B,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAEf","debugId":null}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/actions/doctor.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\n/**\r\n * Set doctor's availability slots\r\n */\r\nexport async function setAvailabilitySlots(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Get the doctor\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    // Get form data\r\n    const startTime = formData.get(\"startTime\");\r\n    const endTime = formData.get(\"endTime\");\r\n\r\n    // Validate input\r\n    if (!startTime || !endTime) {\r\n      throw new Error(\"Start time and end time are required\");\r\n    }\r\n\r\n    if (startTime >= endTime) {\r\n      throw new Error(\"Start time must be before end time\");\r\n    }\r\n\r\n    // Check if the doctor already has slots\r\n    const existingSlots = await db.availability.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n      },\r\n    });\r\n\r\n    // If slots exist, delete them all (we're replacing them)\r\n    if (existingSlots.length > 0) {\r\n      // Don't delete slots that already have appointments\r\n      const slotsWithNoAppointments = existingSlots.filter(\r\n        (slot) => !slot.appointment\r\n      );\r\n\r\n      if (slotsWithNoAppointments.length > 0) {\r\n        await db.availability.deleteMany({\r\n          where: {\r\n            id: {\r\n              in: slotsWithNoAppointments.map((slot) => slot.id),\r\n            },\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    // Create new availability slot\r\n    const newSlot = await db.availability.create({\r\n      data: {\r\n        doctorId: doctor.id,\r\n        startTime: new Date(startTime),\r\n        endTime: new Date(endTime),\r\n        status: \"AVAILABLE\",\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, slot: newSlot };\r\n  } catch (error) {\r\n    console.error(\"Failed to set availability slots:\", error);\r\n    throw new Error(\"Failed to set availability: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor's current availability slots\r\n */\r\nexport async function getDoctorAvailability() {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const availabilitySlots = await db.availability.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n      },\r\n      orderBy: {\r\n        startTime: \"asc\",\r\n      },\r\n    });\r\n\r\n    return { slots: availabilitySlots };\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch availability slots \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor's upcoming appointments\r\n */\r\n\r\nexport async function getDoctorAppointments() {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointments = await db.appointment.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n        status: {\r\n          in: [\"SCHEDULED\"],\r\n        },\r\n      },\r\n      include: {\r\n        patient: true,\r\n      },\r\n      orderBy: {\r\n        startTime: \"asc\",\r\n      },\r\n    });\r\n\r\n    return { appointments };\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch appointments \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel an appointment (can be done by both doctor and patient)\r\n */\r\nexport async function cancelAppointment(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment with both patient and doctor details\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      include: {\r\n        patient: true,\r\n        doctor: true,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Verify the user is either the doctor or the patient for this appointment\r\n    if (appointment.doctorId !== user.id && appointment.patientId !== user.id) {\r\n      throw new Error(\"You are not authorized to cancel this appointment\");\r\n    }\r\n\r\n    // Perform cancellation in a transaction\r\n    await db.$transaction(async (tx) => {\r\n      // Update the appointment status to CANCELLED\r\n      await tx.appointment.update({\r\n        where: {\r\n          id: appointmentId,\r\n        },\r\n        data: {\r\n          status: \"CANCELLED\",\r\n        },\r\n      });\r\n\r\n      // Always refund credits to patient and deduct from doctor\r\n      // Create credit transaction for patient (refund)\r\n      await tx.creditTransaction.create({\r\n        data: {\r\n          userId: appointment.patientId,\r\n          amount: 2,\r\n          type: \"APPOINTMENT_DEDUCTION\",\r\n        },\r\n      });\r\n\r\n      // Create credit transaction for doctor (deduction)\r\n      await tx.creditTransaction.create({\r\n        data: {\r\n          userId: appointment.doctorId,\r\n          amount: -2,\r\n          type: \"APPOINTMENT_DEDUCTION\",\r\n        },\r\n      });\r\n\r\n      // Update patient's credit balance (increment)\r\n      await tx.user.update({\r\n        where: {\r\n          id: appointment.patientId,\r\n        },\r\n        data: {\r\n          credits: {\r\n            increment: 2,\r\n          },\r\n        },\r\n      });\r\n\r\n      // Update doctor's credit balance (decrement)\r\n      await tx.user.update({\r\n        where: {\r\n          id: appointment.doctorId,\r\n        },\r\n        data: {\r\n          credits: {\r\n            decrement: 2,\r\n          },\r\n        },\r\n      });\r\n    });\r\n\r\n    // Determine which path to revalidate based on user role\r\n    if (user.role === \"DOCTOR\") {\r\n      revalidatePath(\"/doctor\");\r\n    } else if (user.role === \"PATIENT\") {\r\n      revalidatePath(\"/appointments\");\r\n    }\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Failed to cancel appointment:\", error);\r\n    throw new Error(\"Failed to cancel appointment: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Add notes to an appointment\r\n */\r\nexport async function addAppointmentNotes(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n    const notes = formData.get(\"notes\");\r\n\r\n    if (!appointmentId || !notes) {\r\n      throw new Error(\"Appointment ID and notes are required\");\r\n    }\r\n\r\n    // Verify the appointment belongs to this doctor\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n        doctorId: doctor.id,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Update the appointment notes\r\n    const updatedAppointment = await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        notes,\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, appointment: updatedAppointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to add appointment notes:\", error);\r\n    throw new Error(\"Failed to update notes: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Mark an appointment as completed (only by doctor after end time)\r\n */\r\nexport async function markAppointmentCompleted(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n        doctorId: doctor.id, // Ensure appointment belongs to this doctor\r\n      },\r\n      include: {\r\n        patient: true,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found or not authorized\");\r\n    }\r\n\r\n    // Check if appointment is currently scheduled\r\n    if (appointment.status !== \"SCHEDULED\") {\r\n      throw new Error(\"Only scheduled appointments can be marked as completed\");\r\n    }\r\n\r\n    // Check if current time is after the appointment end time\r\n    const now = new Date();\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n\r\n    if (now < appointmentEndTime) {\r\n      throw new Error(\r\n        \"Cannot mark appointment as completed before the scheduled end time\"\r\n      );\r\n    }\r\n\r\n    // Update the appointment status to COMPLETED\r\n    const updatedAppointment = await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        status: \"COMPLETED\",\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, appointment: updatedAppointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to mark appointment as completed:\", error);\r\n    throw new Error(\r\n      \"Failed to mark appointment as completed: \" + error.message\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAyKsB,oBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/actions/doctor.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\n/**\r\n * Set doctor's availability slots\r\n */\r\nexport async function setAvailabilitySlots(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Get the doctor\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    // Get form data\r\n    const startTime = formData.get(\"startTime\");\r\n    const endTime = formData.get(\"endTime\");\r\n\r\n    // Validate input\r\n    if (!startTime || !endTime) {\r\n      throw new Error(\"Start time and end time are required\");\r\n    }\r\n\r\n    if (startTime >= endTime) {\r\n      throw new Error(\"Start time must be before end time\");\r\n    }\r\n\r\n    // Check if the doctor already has slots\r\n    const existingSlots = await db.availability.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n      },\r\n    });\r\n\r\n    // If slots exist, delete them all (we're replacing them)\r\n    if (existingSlots.length > 0) {\r\n      // Don't delete slots that already have appointments\r\n      const slotsWithNoAppointments = existingSlots.filter(\r\n        (slot) => !slot.appointment\r\n      );\r\n\r\n      if (slotsWithNoAppointments.length > 0) {\r\n        await db.availability.deleteMany({\r\n          where: {\r\n            id: {\r\n              in: slotsWithNoAppointments.map((slot) => slot.id),\r\n            },\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    // Create new availability slot\r\n    const newSlot = await db.availability.create({\r\n      data: {\r\n        doctorId: doctor.id,\r\n        startTime: new Date(startTime),\r\n        endTime: new Date(endTime),\r\n        status: \"AVAILABLE\",\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, slot: newSlot };\r\n  } catch (error) {\r\n    console.error(\"Failed to set availability slots:\", error);\r\n    throw new Error(\"Failed to set availability: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor's current availability slots\r\n */\r\nexport async function getDoctorAvailability() {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const availabilitySlots = await db.availability.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n      },\r\n      orderBy: {\r\n        startTime: \"asc\",\r\n      },\r\n    });\r\n\r\n    return { slots: availabilitySlots };\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch availability slots \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor's upcoming appointments\r\n */\r\n\r\nexport async function getDoctorAppointments() {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointments = await db.appointment.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n        status: {\r\n          in: [\"SCHEDULED\"],\r\n        },\r\n      },\r\n      include: {\r\n        patient: true,\r\n      },\r\n      orderBy: {\r\n        startTime: \"asc\",\r\n      },\r\n    });\r\n\r\n    return { appointments };\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch appointments \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel an appointment (can be done by both doctor and patient)\r\n */\r\nexport async function cancelAppointment(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment with both patient and doctor details\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      include: {\r\n        patient: true,\r\n        doctor: true,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Verify the user is either the doctor or the patient for this appointment\r\n    if (appointment.doctorId !== user.id && appointment.patientId !== user.id) {\r\n      throw new Error(\"You are not authorized to cancel this appointment\");\r\n    }\r\n\r\n    // Perform cancellation in a transaction\r\n    await db.$transaction(async (tx) => {\r\n      // Update the appointment status to CANCELLED\r\n      await tx.appointment.update({\r\n        where: {\r\n          id: appointmentId,\r\n        },\r\n        data: {\r\n          status: \"CANCELLED\",\r\n        },\r\n      });\r\n\r\n      // Always refund credits to patient and deduct from doctor\r\n      // Create credit transaction for patient (refund)\r\n      await tx.creditTransaction.create({\r\n        data: {\r\n          userId: appointment.patientId,\r\n          amount: 2,\r\n          type: \"APPOINTMENT_DEDUCTION\",\r\n        },\r\n      });\r\n\r\n      // Create credit transaction for doctor (deduction)\r\n      await tx.creditTransaction.create({\r\n        data: {\r\n          userId: appointment.doctorId,\r\n          amount: -2,\r\n          type: \"APPOINTMENT_DEDUCTION\",\r\n        },\r\n      });\r\n\r\n      // Update patient's credit balance (increment)\r\n      await tx.user.update({\r\n        where: {\r\n          id: appointment.patientId,\r\n        },\r\n        data: {\r\n          credits: {\r\n            increment: 2,\r\n          },\r\n        },\r\n      });\r\n\r\n      // Update doctor's credit balance (decrement)\r\n      await tx.user.update({\r\n        where: {\r\n          id: appointment.doctorId,\r\n        },\r\n        data: {\r\n          credits: {\r\n            decrement: 2,\r\n          },\r\n        },\r\n      });\r\n    });\r\n\r\n    // Determine which path to revalidate based on user role\r\n    if (user.role === \"DOCTOR\") {\r\n      revalidatePath(\"/doctor\");\r\n    } else if (user.role === \"PATIENT\") {\r\n      revalidatePath(\"/appointments\");\r\n    }\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Failed to cancel appointment:\", error);\r\n    throw new Error(\"Failed to cancel appointment: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Add notes to an appointment\r\n */\r\nexport async function addAppointmentNotes(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n    const notes = formData.get(\"notes\");\r\n\r\n    if (!appointmentId || !notes) {\r\n      throw new Error(\"Appointment ID and notes are required\");\r\n    }\r\n\r\n    // Verify the appointment belongs to this doctor\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n        doctorId: doctor.id,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Update the appointment notes\r\n    const updatedAppointment = await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        notes,\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, appointment: updatedAppointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to add appointment notes:\", error);\r\n    throw new Error(\"Failed to update notes: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Mark an appointment as completed (only by doctor after end time)\r\n */\r\nexport async function markAppointmentCompleted(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n        doctorId: doctor.id, // Ensure appointment belongs to this doctor\r\n      },\r\n      include: {\r\n        patient: true,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found or not authorized\");\r\n    }\r\n\r\n    // Check if appointment is currently scheduled\r\n    if (appointment.status !== \"SCHEDULED\") {\r\n      throw new Error(\"Only scheduled appointments can be marked as completed\");\r\n    }\r\n\r\n    // Check if current time is after the appointment end time\r\n    const now = new Date();\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n\r\n    if (now < appointmentEndTime) {\r\n      throw new Error(\r\n        \"Cannot mark appointment as completed before the scheduled end time\"\r\n      );\r\n    }\r\n\r\n    // Update the appointment status to COMPLETED\r\n    const updatedAppointment = await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        status: \"COMPLETED\",\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, appointment: updatedAppointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to mark appointment as completed:\", error);\r\n    throw new Error(\r\n      \"Failed to mark appointment as completed: \" + error.message\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IA8RsB,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/actions/doctor.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\n/**\r\n * Set doctor's availability slots\r\n */\r\nexport async function setAvailabilitySlots(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Get the doctor\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    // Get form data\r\n    const startTime = formData.get(\"startTime\");\r\n    const endTime = formData.get(\"endTime\");\r\n\r\n    // Validate input\r\n    if (!startTime || !endTime) {\r\n      throw new Error(\"Start time and end time are required\");\r\n    }\r\n\r\n    if (startTime >= endTime) {\r\n      throw new Error(\"Start time must be before end time\");\r\n    }\r\n\r\n    // Check if the doctor already has slots\r\n    const existingSlots = await db.availability.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n      },\r\n    });\r\n\r\n    // If slots exist, delete them all (we're replacing them)\r\n    if (existingSlots.length > 0) {\r\n      // Don't delete slots that already have appointments\r\n      const slotsWithNoAppointments = existingSlots.filter(\r\n        (slot) => !slot.appointment\r\n      );\r\n\r\n      if (slotsWithNoAppointments.length > 0) {\r\n        await db.availability.deleteMany({\r\n          where: {\r\n            id: {\r\n              in: slotsWithNoAppointments.map((slot) => slot.id),\r\n            },\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    // Create new availability slot\r\n    const newSlot = await db.availability.create({\r\n      data: {\r\n        doctorId: doctor.id,\r\n        startTime: new Date(startTime),\r\n        endTime: new Date(endTime),\r\n        status: \"AVAILABLE\",\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, slot: newSlot };\r\n  } catch (error) {\r\n    console.error(\"Failed to set availability slots:\", error);\r\n    throw new Error(\"Failed to set availability: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor's current availability slots\r\n */\r\nexport async function getDoctorAvailability() {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const availabilitySlots = await db.availability.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n      },\r\n      orderBy: {\r\n        startTime: \"asc\",\r\n      },\r\n    });\r\n\r\n    return { slots: availabilitySlots };\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch availability slots \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor's upcoming appointments\r\n */\r\n\r\nexport async function getDoctorAppointments() {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointments = await db.appointment.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n        status: {\r\n          in: [\"SCHEDULED\"],\r\n        },\r\n      },\r\n      include: {\r\n        patient: true,\r\n      },\r\n      orderBy: {\r\n        startTime: \"asc\",\r\n      },\r\n    });\r\n\r\n    return { appointments };\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch appointments \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Cancel an appointment (can be done by both doctor and patient)\r\n */\r\nexport async function cancelAppointment(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment with both patient and doctor details\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      include: {\r\n        patient: true,\r\n        doctor: true,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Verify the user is either the doctor or the patient for this appointment\r\n    if (appointment.doctorId !== user.id && appointment.patientId !== user.id) {\r\n      throw new Error(\"You are not authorized to cancel this appointment\");\r\n    }\r\n\r\n    // Perform cancellation in a transaction\r\n    await db.$transaction(async (tx) => {\r\n      // Update the appointment status to CANCELLED\r\n      await tx.appointment.update({\r\n        where: {\r\n          id: appointmentId,\r\n        },\r\n        data: {\r\n          status: \"CANCELLED\",\r\n        },\r\n      });\r\n\r\n      // Always refund credits to patient and deduct from doctor\r\n      // Create credit transaction for patient (refund)\r\n      await tx.creditTransaction.create({\r\n        data: {\r\n          userId: appointment.patientId,\r\n          amount: 2,\r\n          type: \"APPOINTMENT_DEDUCTION\",\r\n        },\r\n      });\r\n\r\n      // Create credit transaction for doctor (deduction)\r\n      await tx.creditTransaction.create({\r\n        data: {\r\n          userId: appointment.doctorId,\r\n          amount: -2,\r\n          type: \"APPOINTMENT_DEDUCTION\",\r\n        },\r\n      });\r\n\r\n      // Update patient's credit balance (increment)\r\n      await tx.user.update({\r\n        where: {\r\n          id: appointment.patientId,\r\n        },\r\n        data: {\r\n          credits: {\r\n            increment: 2,\r\n          },\r\n        },\r\n      });\r\n\r\n      // Update doctor's credit balance (decrement)\r\n      await tx.user.update({\r\n        where: {\r\n          id: appointment.doctorId,\r\n        },\r\n        data: {\r\n          credits: {\r\n            decrement: 2,\r\n          },\r\n        },\r\n      });\r\n    });\r\n\r\n    // Determine which path to revalidate based on user role\r\n    if (user.role === \"DOCTOR\") {\r\n      revalidatePath(\"/doctor\");\r\n    } else if (user.role === \"PATIENT\") {\r\n      revalidatePath(\"/appointments\");\r\n    }\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Failed to cancel appointment:\", error);\r\n    throw new Error(\"Failed to cancel appointment: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Add notes to an appointment\r\n */\r\nexport async function addAppointmentNotes(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n    const notes = formData.get(\"notes\");\r\n\r\n    if (!appointmentId || !notes) {\r\n      throw new Error(\"Appointment ID and notes are required\");\r\n    }\r\n\r\n    // Verify the appointment belongs to this doctor\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n        doctorId: doctor.id,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Update the appointment notes\r\n    const updatedAppointment = await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        notes,\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, appointment: updatedAppointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to add appointment notes:\", error);\r\n    throw new Error(\"Failed to update notes: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Mark an appointment as completed (only by doctor after end time)\r\n */\r\nexport async function markAppointmentCompleted(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"DOCTOR\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n        doctorId: doctor.id, // Ensure appointment belongs to this doctor\r\n      },\r\n      include: {\r\n        patient: true,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found or not authorized\");\r\n    }\r\n\r\n    // Check if appointment is currently scheduled\r\n    if (appointment.status !== \"SCHEDULED\") {\r\n      throw new Error(\"Only scheduled appointments can be marked as completed\");\r\n    }\r\n\r\n    // Check if current time is after the appointment end time\r\n    const now = new Date();\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n\r\n    if (now < appointmentEndTime) {\r\n      throw new Error(\r\n        \"Cannot mark appointment as completed before the scheduled end time\"\r\n      );\r\n    }\r\n\r\n    // Update the appointment status to COMPLETED\r\n    const updatedAppointment = await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        status: \"COMPLETED\",\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/doctor\");\r\n    return { success: true, appointment: updatedAppointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to mark appointment as completed:\", error);\r\n    throw new Error(\r\n      \"Failed to mark appointment as completed: \" + error.message\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAyVsB,2BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/actions/appointments.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { deductCreditsForAppointment } from \"@/actions/credits\";\r\nimport { Vonage } from \"@vonage/server-sdk\";\r\nimport { addDays, addMinutes, format, isBefore, endOfDay } from \"date-fns\";\r\nimport { Auth } from \"@vonage/auth\";\r\n\r\n// Initialize Vonage Video API client\r\nconst credentials = new Auth({\r\n  applicationId: process.env.NEXT_PUBLIC_VONAGE_APPLICATION_ID,\r\n  privateKey: process.env.VONAGE_PRIVATE_KEY,\r\n});\r\nconst options = {};\r\nconst vonage = new Vonage(credentials, options);\r\n\r\n/**\r\n * Book a new appointment with a doctor\r\n */\r\nexport async function bookAppointment(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Get the patient user\r\n    const patient = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"PATIENT\",\r\n      },\r\n    });\r\n\r\n    if (!patient) {\r\n      throw new Error(\"Patient not found\");\r\n    }\r\n\r\n    // Parse form data\r\n    const doctorId = formData.get(\"doctorId\");\r\n    const startTime = new Date(formData.get(\"startTime\"));\r\n    const endTime = new Date(formData.get(\"endTime\"));\r\n    const patientDescription = formData.get(\"description\") || null;\r\n\r\n    // Validate input\r\n    if (!doctorId || !startTime || !endTime) {\r\n      throw new Error(\"Doctor, start time, and end time are required\");\r\n    }\r\n\r\n    // Check if the doctor exists and is verified\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        id: doctorId,\r\n        role: \"DOCTOR\",\r\n        verificationStatus: \"VERIFIED\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found or not verified\");\r\n    }\r\n\r\n    // Check if the patient has enough credits (2 credits per appointment)\r\n    if (patient.credits < 2) {\r\n      throw new Error(\"Insufficient credits to book an appointment\");\r\n    }\r\n\r\n    // Check if the requested time slot is available\r\n    const overlappingAppointment = await db.appointment.findFirst({\r\n      where: {\r\n        doctorId: doctorId,\r\n        status: \"SCHEDULED\",\r\n        OR: [\r\n          {\r\n            // New appointment starts during an existing appointment\r\n            startTime: {\r\n              lte: startTime,\r\n            },\r\n            endTime: {\r\n              gt: startTime,\r\n            },\r\n          },\r\n          {\r\n            // New appointment ends during an existing appointment\r\n            startTime: {\r\n              lt: endTime,\r\n            },\r\n            endTime: {\r\n              gte: endTime,\r\n            },\r\n          },\r\n          {\r\n            // New appointment completely overlaps an existing appointment\r\n            startTime: {\r\n              gte: startTime,\r\n            },\r\n            endTime: {\r\n              lte: endTime,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    });\r\n\r\n    if (overlappingAppointment) {\r\n      throw new Error(\"This time slot is already booked\");\r\n    }\r\n\r\n    // Create a new Vonage Video API session\r\n    const sessionId = await createVideoSession();\r\n\r\n    // Deduct credits from patient and add to doctor\r\n    const { success, error } = await deductCreditsForAppointment(\r\n      patient.id,\r\n      doctor.id\r\n    );\r\n\r\n    if (!success) {\r\n      throw new Error(error || \"Failed to deduct credits\");\r\n    }\r\n\r\n    // Create the appointment with the video session ID\r\n    const appointment = await db.appointment.create({\r\n      data: {\r\n        patientId: patient.id,\r\n        doctorId: doctor.id,\r\n        startTime,\r\n        endTime,\r\n        patientDescription,\r\n        status: \"SCHEDULED\",\r\n        videoSessionId: sessionId, // Store the Vonage session ID\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/appointments\");\r\n    return { success: true, appointment: appointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to book appointment:\", error);\r\n    throw new Error(\"Failed to book appointment:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a Vonage Video API session\r\n */\r\nasync function createVideoSession() {\r\n  try {\r\n    const session = await vonage.video.createSession({ mediaMode: \"routed\" });\r\n    return session.sessionId;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to create video session: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a token for a video session\r\n * This will be called when either doctor or patient is about to join the call\r\n */\r\nexport async function generateVideoToken(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment and verify the user is part of it\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Verify the user is either the doctor or the patient for this appointment\r\n    if (appointment.doctorId !== user.id && appointment.patientId !== user.id) {\r\n      throw new Error(\"You are not authorized to join this call\");\r\n    }\r\n\r\n    // Verify the appointment is scheduled\r\n    if (appointment.status !== \"SCHEDULED\") {\r\n      throw new Error(\"This appointment is not currently scheduled\");\r\n    }\r\n\r\n    // Verify the appointment is within a valid time range (e.g., starting 5 minutes before scheduled time)\r\n    const now = new Date();\r\n    const appointmentTime = new Date(appointment.startTime);\r\n    const timeDifference = (appointmentTime - now) / (1000 * 60); // difference in minutes\r\n\r\n    if (timeDifference > 30) {\r\n      throw new Error(\r\n        \"The call will be available 30 minutes before the scheduled time\"\r\n      );\r\n    }\r\n\r\n    // Generate a token for the video session\r\n    // Token expires 2 hours after the appointment start time\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n    const expirationTime =\r\n      Math.floor(appointmentEndTime.getTime() / 1000) + 60 * 60; // 1 hour after end time\r\n\r\n    // Use user's name and role as connection data\r\n    const connectionData = JSON.stringify({\r\n      name: user.name,\r\n      role: user.role,\r\n      userId: user.id,\r\n    });\r\n\r\n    // Generate the token with appropriate role and expiration\r\n    const token = vonage.video.generateClientToken(appointment.videoSessionId, {\r\n      role: \"publisher\", // Both doctor and patient can publish streams\r\n      expireTime: expirationTime,\r\n      data: connectionData,\r\n    });\r\n\r\n    // Update the appointment with the token\r\n    await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        videoSessionToken: token,\r\n      },\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      videoSessionId: appointment.videoSessionId,\r\n      token: token,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to generate video token:\", error);\r\n    throw new Error(\"Failed to generate video token:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor by ID\r\n */\r\nexport async function getDoctorById(doctorId) {\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        id: doctorId,\r\n        role: \"DOCTOR\",\r\n        verificationStatus: \"VERIFIED\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    return { doctor };\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch doctor:\", error);\r\n    throw new Error(\"Failed to fetch doctor details\");\r\n  }\r\n}\r\n\r\n/**\r\n * Get available time slots for booking for the next 4 days\r\n */\r\nexport async function getAvailableTimeSlots(doctorId) {\r\n  try {\r\n    // Validate doctor existence and verification\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        id: doctorId,\r\n        role: \"DOCTOR\",\r\n        verificationStatus: \"VERIFIED\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found or not verified\");\r\n    }\r\n\r\n    // Fetch a single availability record\r\n    const availability = await db.availability.findFirst({\r\n      where: {\r\n        doctorId: doctor.id,\r\n        status: \"AVAILABLE\",\r\n      },\r\n    });\r\n\r\n    if (!availability) {\r\n      throw new Error(\"No availability set by doctor\");\r\n    }\r\n\r\n    // Get the next 4 days\r\n    const now = new Date();\r\n    const days = [now, addDays(now, 1), addDays(now, 2), addDays(now, 3)];\r\n\r\n    // Fetch existing appointments for the doctor over the next 4 days\r\n    const lastDay = endOfDay(days[3]);\r\n    const existingAppointments = await db.appointment.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n        status: \"SCHEDULED\",\r\n        startTime: {\r\n          lte: lastDay,\r\n        },\r\n      },\r\n    });\r\n\r\n    const availableSlotsByDay = {};\r\n\r\n    // For each of the next 4 days, generate available slots\r\n    for (const day of days) {\r\n      const dayString = format(day, \"yyyy-MM-dd\");\r\n      availableSlotsByDay[dayString] = [];\r\n\r\n      // Create a copy of the availability start/end times for this day\r\n      const availabilityStart = new Date(availability.startTime);\r\n      const availabilityEnd = new Date(availability.endTime);\r\n\r\n      // Set the day to the current day we're processing\r\n      availabilityStart.setFullYear(\r\n        day.getFullYear(),\r\n        day.getMonth(),\r\n        day.getDate()\r\n      );\r\n      availabilityEnd.setFullYear(\r\n        day.getFullYear(),\r\n        day.getMonth(),\r\n        day.getDate()\r\n      );\r\n\r\n      let current = new Date(availabilityStart);\r\n      const end = new Date(availabilityEnd);\r\n\r\n      while (\r\n        isBefore(addMinutes(current, 30), end) ||\r\n        +addMinutes(current, 30) === +end\r\n      ) {\r\n        const next = addMinutes(current, 30);\r\n\r\n        // Skip past slots\r\n        if (isBefore(current, now)) {\r\n          current = next;\r\n          continue;\r\n        }\r\n\r\n        const overlaps = existingAppointments.some((appointment) => {\r\n          const aStart = new Date(appointment.startTime);\r\n          const aEnd = new Date(appointment.endTime);\r\n\r\n          return (\r\n            (current >= aStart && current < aEnd) ||\r\n            (next > aStart && next <= aEnd) ||\r\n            (current <= aStart && next >= aEnd)\r\n          );\r\n        });\r\n\r\n        if (!overlaps) {\r\n          availableSlotsByDay[dayString].push({\r\n            startTime: current.toISOString(),\r\n            endTime: next.toISOString(),\r\n            formatted: `${format(current, \"h:mm a\")} - ${format(\r\n              next,\r\n              \"h:mm a\"\r\n            )}`,\r\n            day: format(current, \"EEEE, MMMM d\"),\r\n          });\r\n        }\r\n\r\n        current = next;\r\n      }\r\n    }\r\n\r\n    // Convert to array of slots grouped by day for easier consumption by the UI\r\n    const result = Object.entries(availableSlotsByDay).map(([date, slots]) => ({\r\n      date,\r\n      displayDate:\r\n        slots.length > 0\r\n          ? slots[0].day\r\n          : format(new Date(date), \"EEEE, MMMM d\"),\r\n      slots,\r\n    }));\r\n\r\n    return { days: result };\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch available slots:\", error);\r\n    throw new Error(\"Failed to fetch available time slots: \" + error.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAiKsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 483, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/hooks/use-fetch.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\n\r\nconst useFetch = (cb) => {\r\n  const [data, setData] = useState(undefined);\r\n  const [loading, setLoading] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fn = async (...args) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await cb(...args);\r\n      setData(response);\r\n      setError(null);\r\n    } catch (error) {\r\n      setError(error);\r\n      toast.error(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { data, loading, error, fn, setData };\r\n};\r\n\r\nexport default useFetch;\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,WAAW,CAAC;IAChB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,MAAM,KAAK,OAAO,GAAG;QACnB,WAAW;QACX,SAAS;QAET,IAAI;YACF,MAAM,WAAW,MAAM,MAAM;YAC7B,QAAQ;YACR,SAAS;QACX,EAAE,OAAO,OAAO;YACd,SAAS;YACT,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC,MAAM,OAAO;QAC3B,SAAU;YACR,WAAW;QACb;IACF;IAEA,OAAO;QAAE;QAAM;QAAS;QAAO;QAAI;IAAQ;AAC7C;uCAEe","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/components/appointment-card.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  Calendar,\r\n  Clock,\r\n  User,\r\n  Video,\r\n  Stethoscope,\r\n  X,\r\n  Edit,\r\n  Loader2,\r\n  CheckCircle,\r\n} from \"lucide-react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport {\r\n  cancelAppointment,\r\n  addAppointmentNotes,\r\n  markAppointmentCompleted,\r\n} from \"@/actions/doctor\";\r\nimport { generateVideoToken } from \"@/actions/appointments\";\r\nimport useFetch from \"@/hooks/use-fetch\";\r\nimport { toast } from \"sonner\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nexport function AppointmentCard({\r\n  appointment,\r\n  userRole,\r\n  refetchAppointments,\r\n}) {\r\n  const [open, setOpen] = useState(false);\r\n  const [action, setAction] = useState(null); // 'cancel', 'notes', 'video', or 'complete'\r\n  const [notes, setNotes] = useState(appointment.notes || \"\");\r\n  const router = useRouter();\r\n\r\n  // UseFetch hooks for server actions\r\n  const {\r\n    loading: cancelLoading,\r\n    fn: submitCancel,\r\n    data: cancelData,\r\n  } = useFetch(cancelAppointment);\r\n  const {\r\n    loading: notesLoading,\r\n    fn: submitNotes,\r\n    data: notesData,\r\n  } = useFetch(addAppointmentNotes);\r\n  const {\r\n    loading: tokenLoading,\r\n    fn: submitTokenRequest,\r\n    data: tokenData,\r\n  } = useFetch(generateVideoToken);\r\n  const {\r\n    loading: completeLoading,\r\n    fn: submitMarkCompleted,\r\n    data: completeData,\r\n  } = useFetch(markAppointmentCompleted);\r\n\r\n  // Format date and time\r\n  const formatDateTime = (dateString) => {\r\n    try {\r\n      return format(new Date(dateString), \"MMMM d, yyyy 'at' h:mm a\");\r\n    } catch (e) {\r\n      return \"Invalid date\";\r\n    }\r\n  };\r\n\r\n  // Format time only\r\n  const formatTime = (dateString) => {\r\n    try {\r\n      return format(new Date(dateString), \"h:mm a\");\r\n    } catch (e) {\r\n      return \"Invalid time\";\r\n    }\r\n  };\r\n\r\n  // Check if appointment can be marked as completed\r\n  const canMarkCompleted = () => {\r\n    if (userRole !== \"DOCTOR\" || appointment.status !== \"SCHEDULED\") {\r\n      return false;\r\n    }\r\n    const now = new Date();\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n    return now >= appointmentEndTime;\r\n  };\r\n\r\n  // Handle cancel appointment\r\n  const handleCancelAppointment = async () => {\r\n    if (cancelLoading) return;\r\n\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to cancel this appointment? This action cannot be undone.\"\r\n      )\r\n    ) {\r\n      const formData = new FormData();\r\n      formData.append(\"appointmentId\", appointment.id);\r\n      await submitCancel(formData);\r\n    }\r\n  };\r\n\r\n  // Handle mark as completed\r\n  const handleMarkCompleted = async () => {\r\n    if (completeLoading) return;\r\n\r\n    // Check if appointment end time has passed\r\n    const now = new Date();\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n\r\n    if (now < appointmentEndTime) {\r\n      alert(\r\n        \"Cannot mark appointment as completed before the scheduled end time.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to mark this appointment as completed? This action cannot be undone.\"\r\n      )\r\n    ) {\r\n      const formData = new FormData();\r\n      formData.append(\"appointmentId\", appointment.id);\r\n      await submitMarkCompleted(formData);\r\n    }\r\n  };\r\n\r\n  // Handle save notes (doctor only)\r\n  const handleSaveNotes = async () => {\r\n    if (notesLoading || userRole !== \"DOCTOR\") return;\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"appointmentId\", appointment.id);\r\n    formData.append(\"notes\", notes);\r\n    await submitNotes(formData);\r\n  };\r\n\r\n  // Handle join video call\r\n  const handleJoinVideoCall = async () => {\r\n    if (tokenLoading) return;\r\n\r\n    setAction(\"video\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"appointmentId\", appointment.id);\r\n    await submitTokenRequest(formData);\r\n  };\r\n\r\n  // Handle successful operations\r\n  useEffect(() => {\r\n    if (cancelData?.success) {\r\n      toast.success(\"Appointment cancelled successfully\");\r\n      setOpen(false);\r\n      if (refetchAppointments) {\r\n        refetchAppointments();\r\n      } else {\r\n        router.refresh();\r\n      }\r\n    }\r\n  }, [cancelData, refetchAppointments, router]);\r\n\r\n  useEffect(() => {\r\n    if (completeData?.success) {\r\n      toast.success(\"Appointment marked as completed\");\r\n      setOpen(false);\r\n      if (refetchAppointments) {\r\n        refetchAppointments();\r\n      } else {\r\n        router.refresh();\r\n      }\r\n    }\r\n  }, [completeData, refetchAppointments, router]);\r\n\r\n  useEffect(() => {\r\n    if (notesData?.success) {\r\n      toast.success(\"Notes saved successfully\");\r\n      setAction(null);\r\n      if (refetchAppointments) {\r\n        refetchAppointments();\r\n      } else {\r\n        router.refresh();\r\n      }\r\n    }\r\n  }, [notesData, refetchAppointments, router]);\r\n\r\n  useEffect(() => {\r\n    if (tokenData?.success) {\r\n      // Redirect to video call page with token and session ID\r\n      router.push(\r\n        `/video-call?sessionId=${tokenData.videoSessionId}&token=${tokenData.token}&appointmentId=${appointment.id}`\r\n      );\r\n    } else if (tokenData?.error) {\r\n      setAction(null);\r\n    }\r\n  }, [tokenData, appointment.id, router]);\r\n\r\n  // Determine if appointment is active (within 30 minutes of start time)\r\n  const isAppointmentActive = () => {\r\n    const now = new Date();\r\n    const appointmentTime = new Date(appointment.startTime);\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n\r\n    // Can join 30 minutes before start until end time\r\n    return (\r\n      (appointmentTime.getTime() - now.getTime() <= 30 * 60 * 1000 &&\r\n        now < appointmentTime) ||\r\n      (now >= appointmentTime && now <= appointmentEndTime)\r\n    );\r\n  };\r\n\r\n  // Determine other party information based on user role\r\n  const otherParty =\r\n    userRole === \"DOCTOR\" ? appointment.patient : appointment.doctor;\r\n\r\n  const otherPartyLabel = userRole === \"DOCTOR\" ? \"Patient\" : \"Doctor\";\r\n  const otherPartyIcon = userRole === \"DOCTOR\" ? <User /> : <Stethoscope />;\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"border-emerald-900/20 hover:border-emerald-700/30 transition-all\">\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex flex-col md:flex-row justify-between gap-4\">\r\n            <div className=\"flex items-start gap-3\">\r\n              <div className=\"bg-muted/20 rounded-full p-2 mt-1\">\r\n                {otherPartyIcon}\r\n              </div>\r\n              <div>\r\n                <h3 className=\"font-medium text-white\">\r\n                  {userRole === \"DOCTOR\"\r\n                    ? otherParty.name\r\n                    : `Dr. ${otherParty.name}`}\r\n                </h3>\r\n                {userRole === \"DOCTOR\" && (\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    {otherParty.email}\r\n                  </p>\r\n                )}\r\n                {userRole === \"PATIENT\" && (\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    {otherParty.specialty}\r\n                  </p>\r\n                )}\r\n                <div className=\"flex items-center mt-2 text-sm text-muted-foreground\">\r\n                  <Calendar className=\"h-4 w-4 mr-1\" />\r\n                  <span>{formatDateTime(appointment.startTime)}</span>\r\n                </div>\r\n                <div className=\"flex items-center mt-1 text-sm text-muted-foreground\">\r\n                  <Clock className=\"h-4 w-4 mr-1\" />\r\n                  <span>\r\n                    {formatTime(appointment.startTime)} -{\" \"}\r\n                    {formatTime(appointment.endTime)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex flex-col gap-2 self-end md:self-start\">\r\n              <Badge\r\n                variant=\"outline\"\r\n                className={\r\n                  appointment.status === \"COMPLETED\"\r\n                    ? \"bg-emerald-900/20 border-emerald-900/30 text-emerald-400\"\r\n                    : appointment.status === \"CANCELLED\"\r\n                    ? \"bg-red-900/20 border-red-900/30 text-red-400\"\r\n                    : \"bg-amber-900/20 border-amber-900/30 text-amber-400\"\r\n                }\r\n              >\r\n                {appointment.status}\r\n              </Badge>\r\n              <div className=\"flex gap-2 mt-2 flex-wrap\">\r\n                {canMarkCompleted() && (\r\n                  <Button\r\n                    size=\"sm\"\r\n                    onClick={handleMarkCompleted}\r\n                    disabled={completeLoading}\r\n                    className=\"bg-emerald-600 hover:bg-emerald-700\"\r\n                  >\r\n                    {completeLoading ? (\r\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                    ) : (\r\n                      <>\r\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\r\n                        Complete\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                )}\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"outline\"\r\n                  className=\"border-emerald-900/30\"\r\n                  onClick={() => setOpen(true)}\r\n                >\r\n                  View Details\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Appointment Details Dialog */}\r\n      <Dialog open={open} onOpenChange={setOpen}>\r\n        <DialogContent className=\"max-w-2xl\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-xl font-bold text-white\">\r\n              Appointment Details\r\n            </DialogTitle>\r\n            <DialogDescription>\r\n              {appointment.status === \"SCHEDULED\"\r\n                ? \"Manage your upcoming appointment\"\r\n                : \"View appointment information\"}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-4 py-4\">\r\n            {/* Other Party Information */}\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"text-sm font-medium text-muted-foreground\">\r\n                {otherPartyLabel}\r\n              </h4>\r\n              <div className=\"flex items-center\">\r\n                <div className=\"h-5 w-5 text-emerald-400 mr-2\">\r\n                  {otherPartyIcon}\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-white font-medium\">\r\n                    {userRole === \"DOCTOR\"\r\n                      ? otherParty.name\r\n                      : `Dr. ${otherParty.name}`}\r\n                  </p>\r\n                  {userRole === \"DOCTOR\" && (\r\n                    <p className=\"text-muted-foreground text-sm\">\r\n                      {otherParty.email}\r\n                    </p>\r\n                  )}\r\n                  {userRole === \"PATIENT\" && (\r\n                    <p className=\"text-muted-foreground text-sm\">\r\n                      {otherParty.specialty}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Appointment Time */}\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"text-sm font-medium text-muted-foreground\">\r\n                Scheduled Time\r\n              </h4>\r\n              <div className=\"flex flex-col gap-1\">\r\n                <div className=\"flex items-center\">\r\n                  <Calendar className=\"h-5 w-5 text-emerald-400 mr-2\" />\r\n                  <p className=\"text-white\">\r\n                    {formatDateTime(appointment.startTime)}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex items-center\">\r\n                  <Clock className=\"h-5 w-5 text-emerald-400 mr-2\" />\r\n                  <p className=\"text-white\">\r\n                    {formatTime(appointment.startTime)} -{\" \"}\r\n                    {formatTime(appointment.endTime)}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Status */}\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"text-sm font-medium text-muted-foreground\">\r\n                Status\r\n              </h4>\r\n              <Badge\r\n                variant=\"outline\"\r\n                className={\r\n                  appointment.status === \"COMPLETED\"\r\n                    ? \"bg-emerald-900/20 border-emerald-900/30 text-emerald-400\"\r\n                    : appointment.status === \"CANCELLED\"\r\n                    ? \"bg-red-900/20 border-red-900/30 text-red-400\"\r\n                    : \"bg-amber-900/20 border-amber-900/30 text-amber-400\"\r\n                }\r\n              >\r\n                {appointment.status}\r\n              </Badge>\r\n            </div>\r\n\r\n            {/* Patient Description */}\r\n            {appointment.patientDescription && (\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"text-sm font-medium text-muted-foreground\">\r\n                  {userRole === \"DOCTOR\"\r\n                    ? \"Patient Description\"\r\n                    : \"Your Description\"}\r\n                </h4>\r\n                <div className=\"p-3 rounded-md bg-muted/20 border border-emerald-900/20\">\r\n                  <p className=\"text-white whitespace-pre-line\">\r\n                    {appointment.patientDescription}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Join Video Call Button */}\r\n            {appointment.status === \"SCHEDULED\" && (\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"text-sm font-medium text-muted-foreground\">\r\n                  Video Consultation\r\n                </h4>\r\n                <Button\r\n                  className=\"w-full bg-emerald-600 hover:bg-emerald-700\"\r\n                  disabled={\r\n                    !isAppointmentActive() || action === \"video\" || tokenLoading\r\n                  }\r\n                  onClick={handleJoinVideoCall}\r\n                >\r\n                  {tokenLoading || action === \"video\" ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Preparing Video Call...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Video className=\"h-4 w-4 mr-2\" />\r\n                      {isAppointmentActive()\r\n                        ? \"Join Video Call\"\r\n                        : \"Video call will be available 30 minutes before appointment\"}\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Doctor Notes (Doctor can view/edit, Patient can only view) */}\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h4 className=\"text-sm font-medium text-muted-foreground\">\r\n                  Doctor Notes\r\n                </h4>\r\n                {userRole === \"DOCTOR\" &&\r\n                  action !== \"notes\" &&\r\n                  appointment.status !== \"CANCELLED\" && (\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => setAction(\"notes\")}\r\n                      className=\"h-7 text-emerald-400 hover:text-emerald-300 hover:bg-emerald-900/20\"\r\n                    >\r\n                      <Edit className=\"h-3.5 w-3.5 mr-1\" />\r\n                      {appointment.notes ? \"Edit\" : \"Add\"}\r\n                    </Button>\r\n                  )}\r\n              </div>\r\n\r\n              {userRole === \"DOCTOR\" && action === \"notes\" ? (\r\n                <div className=\"space-y-3\">\r\n                  <Textarea\r\n                    value={notes}\r\n                    onChange={(e) => setNotes(e.target.value)}\r\n                    placeholder=\"Enter your clinical notes here...\"\r\n                    className=\"bg-background border-emerald-900/20 min-h-[100px]\"\r\n                  />\r\n                  <div className=\"flex justify-end space-x-2\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        setAction(null);\r\n                        setNotes(appointment.notes || \"\");\r\n                      }}\r\n                      disabled={notesLoading}\r\n                      className=\"border-emerald-900/30\"\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      onClick={handleSaveNotes}\r\n                      disabled={notesLoading}\r\n                      className=\"bg-emerald-600 hover:bg-emerald-700\"\r\n                    >\r\n                      {notesLoading ? (\r\n                        <>\r\n                          <Loader2 className=\"mr-2 h-3.5 w-3.5 animate-spin\" />\r\n                          Saving...\r\n                        </>\r\n                      ) : (\r\n                        \"Save Notes\"\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"p-3 rounded-md bg-muted/20 border border-emerald-900/20 min-h-[80px]\">\r\n                  {appointment.notes ? (\r\n                    <p className=\"text-white whitespace-pre-line\">\r\n                      {appointment.notes}\r\n                    </p>\r\n                  ) : (\r\n                    <p className=\"text-muted-foreground italic\">\r\n                      No notes added yet\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter className=\"flex flex-col-reverse sm:flex-row sm:justify-between sm:space-x-2\">\r\n            <div className=\"flex gap-2\">\r\n              {/* Mark as Complete Button - Only for doctors */}\r\n              {canMarkCompleted() && (\r\n                <Button\r\n                  onClick={handleMarkCompleted}\r\n                  disabled={completeLoading}\r\n                  className=\"bg-emerald-600 hover:bg-emerald-700\"\r\n                >\r\n                  {completeLoading ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Completing...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <CheckCircle className=\"mr-2 h-4 w-4\" />\r\n                      Mark Complete\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              )}\r\n\r\n              {/* Cancel Button - For scheduled appointments */}\r\n              {appointment.status === \"SCHEDULED\" && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={handleCancelAppointment}\r\n                  disabled={cancelLoading}\r\n                  className=\"border-red-900/30 text-red-400 hover:bg-red-900/10 mt-3 sm:mt-0\"\r\n                >\r\n                  {cancelLoading ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Cancelling...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <X className=\"h-4 w-4 mr-1\" />\r\n                      Cancel Appointment\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              )}\r\n            </div>\r\n\r\n            <Button\r\n              onClick={() => setOpen(false)}\r\n              className=\"bg-emerald-600 hover:bg-emerald-700\"\r\n            >\r\n              Close\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}