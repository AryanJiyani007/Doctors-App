{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/actions/appointments.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { deductCreditsForAppointment } from \"@/actions/credits\";\r\nimport { Vonage } from \"@vonage/server-sdk\";\r\nimport { addDays, addMinutes, format, isBefore, endOfDay } from \"date-fns\";\r\nimport { Auth } from \"@vonage/auth\";\r\n\r\n// Initialize Vonage Video API client\r\nconst credentials = new Auth({\r\n  applicationId: process.env.NEXT_PUBLIC_VONAGE_APPLICATION_ID,\r\n  privateKey: process.env.VONAGE_PRIVATE_KEY,\r\n});\r\nconst options = {};\r\nconst vonage = new Vonage(credentials, options);\r\n\r\n/**\r\n * Book a new appointment with a doctor\r\n */\r\nexport async function bookAppointment(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Get the patient user\r\n    const patient = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n        role: \"PATIENT\",\r\n      },\r\n    });\r\n\r\n    if (!patient) {\r\n      throw new Error(\"Patient not found\");\r\n    }\r\n\r\n    // Parse form data\r\n    const doctorId = formData.get(\"doctorId\");\r\n    const startTime = new Date(formData.get(\"startTime\"));\r\n    const endTime = new Date(formData.get(\"endTime\"));\r\n    const patientDescription = formData.get(\"description\") || null;\r\n\r\n    // Validate input\r\n    if (!doctorId || !startTime || !endTime) {\r\n      throw new Error(\"Doctor, start time, and end time are required\");\r\n    }\r\n\r\n    // Check if the doctor exists and is verified\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        id: doctorId,\r\n        role: \"DOCTOR\",\r\n        verificationStatus: \"VERIFIED\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found or not verified\");\r\n    }\r\n\r\n    // Check if the patient has enough credits (2 credits per appointment)\r\n    if (patient.credits < 2) {\r\n      throw new Error(\"Insufficient credits to book an appointment\");\r\n    }\r\n\r\n    // Check if the requested time slot is available\r\n    const overlappingAppointment = await db.appointment.findFirst({\r\n      where: {\r\n        doctorId: doctorId,\r\n        status: \"SCHEDULED\",\r\n        OR: [\r\n          {\r\n            // New appointment starts during an existing appointment\r\n            startTime: {\r\n              lte: startTime,\r\n            },\r\n            endTime: {\r\n              gt: startTime,\r\n            },\r\n          },\r\n          {\r\n            // New appointment ends during an existing appointment\r\n            startTime: {\r\n              lt: endTime,\r\n            },\r\n            endTime: {\r\n              gte: endTime,\r\n            },\r\n          },\r\n          {\r\n            // New appointment completely overlaps an existing appointment\r\n            startTime: {\r\n              gte: startTime,\r\n            },\r\n            endTime: {\r\n              lte: endTime,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    });\r\n\r\n    if (overlappingAppointment) {\r\n      throw new Error(\"This time slot is already booked\");\r\n    }\r\n\r\n    // Create a new Vonage Video API session\r\n    const sessionId = await createVideoSession();\r\n\r\n    // Deduct credits from patient and add to doctor\r\n    const { success, error } = await deductCreditsForAppointment(\r\n      patient.id,\r\n      doctor.id\r\n    );\r\n\r\n    if (!success) {\r\n      throw new Error(error || \"Failed to deduct credits\");\r\n    }\r\n\r\n    // Create the appointment with the video session ID\r\n    const appointment = await db.appointment.create({\r\n      data: {\r\n        patientId: patient.id,\r\n        doctorId: doctor.id,\r\n        startTime,\r\n        endTime,\r\n        patientDescription,\r\n        status: \"SCHEDULED\",\r\n        videoSessionId: sessionId, // Store the Vonage session ID\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/appointments\");\r\n    return { success: true, appointment: appointment };\r\n  } catch (error) {\r\n    console.error(\"Failed to book appointment:\", error);\r\n    throw new Error(\"Failed to book appointment:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a Vonage Video API session\r\n */\r\nasync function createVideoSession() {\r\n  try {\r\n    const session = await vonage.video.createSession({ mediaMode: \"routed\" });\r\n    return session.sessionId;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to create video session: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a token for a video session\r\n * This will be called when either doctor or patient is about to join the call\r\n */\r\nexport async function generateVideoToken(formData) {\r\n  const { userId } = await auth();\r\n\r\n  if (!userId) {\r\n    throw new Error(\"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: {\r\n        clerkUserId: userId,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n\r\n    const appointmentId = formData.get(\"appointmentId\");\r\n\r\n    if (!appointmentId) {\r\n      throw new Error(\"Appointment ID is required\");\r\n    }\r\n\r\n    // Find the appointment and verify the user is part of it\r\n    const appointment = await db.appointment.findUnique({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n    });\r\n\r\n    if (!appointment) {\r\n      throw new Error(\"Appointment not found\");\r\n    }\r\n\r\n    // Verify the user is either the doctor or the patient for this appointment\r\n    if (appointment.doctorId !== user.id && appointment.patientId !== user.id) {\r\n      throw new Error(\"You are not authorized to join this call\");\r\n    }\r\n\r\n    // Verify the appointment is scheduled\r\n    if (appointment.status !== \"SCHEDULED\") {\r\n      throw new Error(\"This appointment is not currently scheduled\");\r\n    }\r\n\r\n    // Verify the appointment is within a valid time range (e.g., starting 5 minutes before scheduled time)\r\n    const now = new Date();\r\n    const appointmentTime = new Date(appointment.startTime);\r\n    const timeDifference = (appointmentTime - now) / (1000 * 60); // difference in minutes\r\n\r\n    if (timeDifference > 30) {\r\n      throw new Error(\r\n        \"The call will be available 30 minutes before the scheduled time\"\r\n      );\r\n    }\r\n\r\n    // Generate a token for the video session\r\n    // Token expires 2 hours after the appointment start time\r\n    const appointmentEndTime = new Date(appointment.endTime);\r\n    const expirationTime =\r\n      Math.floor(appointmentEndTime.getTime() / 1000) + 60 * 60; // 1 hour after end time\r\n\r\n    // Use user's name and role as connection data\r\n    const connectionData = JSON.stringify({\r\n      name: user.name,\r\n      role: user.role,\r\n      userId: user.id,\r\n    });\r\n\r\n    // Generate the token with appropriate role and expiration\r\n    const token = vonage.video.generateClientToken(appointment.videoSessionId, {\r\n      role: \"publisher\", // Both doctor and patient can publish streams\r\n      expireTime: expirationTime,\r\n      data: connectionData,\r\n    });\r\n\r\n    // Update the appointment with the token\r\n    await db.appointment.update({\r\n      where: {\r\n        id: appointmentId,\r\n      },\r\n      data: {\r\n        videoSessionToken: token,\r\n      },\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      videoSessionId: appointment.videoSessionId,\r\n      token: token,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to generate video token:\", error);\r\n    throw new Error(\"Failed to generate video token:\" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Get doctor by ID\r\n */\r\nexport async function getDoctorById(doctorId) {\r\n  try {\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        id: doctorId,\r\n        role: \"DOCTOR\",\r\n        verificationStatus: \"VERIFIED\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found\");\r\n    }\r\n\r\n    return { doctor };\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch doctor:\", error);\r\n    throw new Error(\"Failed to fetch doctor details\");\r\n  }\r\n}\r\n\r\n/**\r\n * Get available time slots for booking for the next 4 days\r\n */\r\nexport async function getAvailableTimeSlots(doctorId) {\r\n  try {\r\n    // Validate doctor existence and verification\r\n    const doctor = await db.user.findUnique({\r\n      where: {\r\n        id: doctorId,\r\n        role: \"DOCTOR\",\r\n        verificationStatus: \"VERIFIED\",\r\n      },\r\n    });\r\n\r\n    if (!doctor) {\r\n      throw new Error(\"Doctor not found or not verified\");\r\n    }\r\n\r\n    // Fetch a single availability record\r\n    const availability = await db.availability.findFirst({\r\n      where: {\r\n        doctorId: doctor.id,\r\n        status: \"AVAILABLE\",\r\n      },\r\n    });\r\n\r\n    if (!availability) {\r\n      throw new Error(\"No availability set by doctor\");\r\n    }\r\n\r\n    // Get the next 4 days\r\n    const now = new Date();\r\n    const days = [now, addDays(now, 1), addDays(now, 2), addDays(now, 3)];\r\n\r\n    // Fetch existing appointments for the doctor over the next 4 days\r\n    const lastDay = endOfDay(days[3]);\r\n    const existingAppointments = await db.appointment.findMany({\r\n      where: {\r\n        doctorId: doctor.id,\r\n        status: \"SCHEDULED\",\r\n        startTime: {\r\n          lte: lastDay,\r\n        },\r\n      },\r\n    });\r\n\r\n    const availableSlotsByDay = {};\r\n\r\n    // For each of the next 4 days, generate available slots\r\n    for (const day of days) {\r\n      const dayString = format(day, \"yyyy-MM-dd\");\r\n      availableSlotsByDay[dayString] = [];\r\n\r\n      // Create a copy of the availability start/end times for this day\r\n      const availabilityStart = new Date(availability.startTime);\r\n      const availabilityEnd = new Date(availability.endTime);\r\n\r\n      // Set the day to the current day we're processing\r\n      availabilityStart.setFullYear(\r\n        day.getFullYear(),\r\n        day.getMonth(),\r\n        day.getDate()\r\n      );\r\n      availabilityEnd.setFullYear(\r\n        day.getFullYear(),\r\n        day.getMonth(),\r\n        day.getDate()\r\n      );\r\n\r\n      let current = new Date(availabilityStart);\r\n      const end = new Date(availabilityEnd);\r\n\r\n      while (\r\n        isBefore(addMinutes(current, 30), end) ||\r\n        +addMinutes(current, 30) === +end\r\n      ) {\r\n        const next = addMinutes(current, 30);\r\n\r\n        // Skip past slots\r\n        if (isBefore(current, now)) {\r\n          current = next;\r\n          continue;\r\n        }\r\n\r\n        const overlaps = existingAppointments.some((appointment) => {\r\n          const aStart = new Date(appointment.startTime);\r\n          const aEnd = new Date(appointment.endTime);\r\n\r\n          return (\r\n            (current >= aStart && current < aEnd) ||\r\n            (next > aStart && next <= aEnd) ||\r\n            (current <= aStart && next >= aEnd)\r\n          );\r\n        });\r\n\r\n        if (!overlaps) {\r\n          availableSlotsByDay[dayString].push({\r\n            startTime: current.toISOString(),\r\n            endTime: next.toISOString(),\r\n            formatted: `${format(current, \"h:mm a\")} - ${format(\r\n              next,\r\n              \"h:mm a\"\r\n            )}`,\r\n            day: format(current, \"EEEE, MMMM d\"),\r\n          });\r\n        }\r\n\r\n        current = next;\r\n      }\r\n    }\r\n\r\n    // Convert to array of slots grouped by day for easier consumption by the UI\r\n    const result = Object.entries(availableSlotsByDay).map(([date, slots]) => ({\r\n      date,\r\n      displayDate:\r\n        slots.length > 0\r\n          ? slots[0].day\r\n          : format(new Date(date), \"EEEE, MMMM d\"),\r\n      slots,\r\n    }));\r\n\r\n    return { days: result };\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch available slots:\", error);\r\n    throw new Error(\"Failed to fetch available time slots: \" + error.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/components/page-header.jsx"],"sourcesContent":["import Link from \"next/link\";\r\nimport { ArrowLeft } from \"lucide-react\";\r\nimport React from \"react\";\r\nimport { Button } from \"./ui/button\";\r\n\r\n/**\r\n * Reusable page header component with back button and title\r\n *\r\n * @param {React.ReactNode} props.icon - Icon component to display next to the title\r\n * @param {string} props.title - Page title\r\n * @param {string} props.backLink - URL to navigate back to (defaults to home)\r\n * @param {string} props.backLabel - Text for the back link (defaults to \"Back to Home\")\r\n */\r\nexport function PageHeader({\r\n  icon,\r\n  title,\r\n  backLink = \"/\",\r\n  backLabel = \"Back to Home\",\r\n}) {\r\n  return (\r\n    <div className=\"flex flex-col justify-between gap-5 mb-8\">\r\n      <Link href={backLink}>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"mb-2 border-emerald-900/30\"\r\n        >\r\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n          {backLabel}\r\n        </Button>\r\n      </Link>\r\n      <div className=\"flex items-end gap-2\">\r\n        {icon && (\r\n          <div className=\"text-emerald-400\">\r\n            {React.cloneElement(icon, {\r\n              className: \"h-12 md:h-14 w-12 md:w-14\",\r\n            })}\r\n          </div>\r\n        )}\r\n        <h1 className=\"text-4xl md:text-5xl gradient-title\">{title}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAUO,SAAS,WAAW,EACzB,IAAI,EACJ,KAAK,EACL,WAAW,GAAG,EACd,YAAY,cAAc,EAC3B;IACC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,4JAAA,CAAA,UAAI;gBAAC,MAAM;0BACV,cAAA,8OAAC,2HAAA,CAAA,SAAM;oBACL,SAAQ;oBACR,MAAK;oBACL,WAAU;;sCAEV,8OAAC,gNAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;wBACpB;;;;;;;;;;;;0BAGL,8OAAC;gBAAI,WAAU;;oBACZ,sBACC,8OAAC;wBAAI,WAAU;kCACZ,cAAA,qMAAA,CAAA,UAAK,CAAC,YAAY,CAAC,MAAM;4BACxB,WAAW;wBACb;;;;;;kCAGJ,8OAAC;wBAAG,WAAU;kCAAuC;;;;;;;;;;;;;;;;;;AAI7D","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///D:/Web%20development/projects/doctors-appointment-platform/app/%28main%29/doctors/%5Bspecialty%5D/%5Bid%5D/layout.js"],"sourcesContent":["import { getDoctorById } from \"@/actions/appointments\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { PageHeader } from \"@/components/page-header\";\r\n\r\nexport async function generateMetadata({ params }) {\r\n  const { id } = await params;\r\n\r\n  const { doctor } = await getDoctorById(id);\r\n  return {\r\n    title: `Dr. ${doctor.name} - MediMeet`,\r\n    description: `Book an appointment with Dr. ${doctor.name}, ${doctor.specialty} specialist with ${doctor.experience} years of experience.`,\r\n  };\r\n}\r\n\r\nexport default async function DoctorProfileLayout({ children, params }) {\r\n  const { id } = await params;\r\n  const { doctor } = await getDoctorById(id);\r\n\r\n  if (!doctor) redirect(\"/doctors\");\r\n\r\n  return (\r\n    <div className=\"container mx-auto\">\r\n      <PageHeader\r\n        // icon={<Stethoscope />}\r\n        title={\"Dr. \" + doctor.name}\r\n        backLink={`/doctors/${doctor.specialty}`}\r\n        backLabel={`Back to ${doctor.specialty}`}\r\n      />\r\n\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;;;;;AAEO,eAAe,iBAAiB,EAAE,MAAM,EAAE;IAC/C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,uHAAA,CAAA,gBAAa,AAAD,EAAE;IACvC,OAAO;QACL,OAAO,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC,WAAW,CAAC;QACtC,aAAa,CAAC,6BAA6B,EAAE,OAAO,IAAI,CAAC,EAAE,EAAE,OAAO,SAAS,CAAC,iBAAiB,EAAE,OAAO,UAAU,CAAC,qBAAqB,CAAC;IAC3I;AACF;AAEe,eAAe,oBAAoB,EAAE,QAAQ,EAAE,MAAM,EAAE;IACpE,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,uHAAA,CAAA,gBAAa,AAAD,EAAE;IAEvC,IAAI,CAAC,QAAQ,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAEtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,6HAAA,CAAA,aAAU;gBACT,yBAAyB;gBACzB,OAAO,SAAS,OAAO,IAAI;gBAC3B,UAAU,CAAC,SAAS,EAAE,OAAO,SAAS,EAAE;gBACxC,WAAW,CAAC,QAAQ,EAAE,OAAO,SAAS,EAAE;;;;;;YAGzC;;;;;;;AAGP","debugId":null}}]
}